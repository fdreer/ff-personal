---
import Button from '@/components/Button.astro'
import Layout from '@/layouts/Layout.astro'
---

<Layout title="FF Franco">
    <main>
        <form action="" id="form">
            <label for="concept">
                Concepto de ingreso
                <input type="text" name="concept" id="concept" />
            </label>

            <label for="calendar">
                Fecha
                <input type="date" name="incomeDate" id="calendar" />
            </label>

            <label for="total">
                Importe
                <input
                    type="tel"
                    name="totalAmount"
                    id="total"
                    autocomplete="off"
                />
            </label>

            <Button type="submit" color="green">REGISTRAR</Button>
            <Button type="reset" color="blue" id="reset-btn"
                >CARGAR NUEVO</Button
            >
        </form>
    </main>
</Layout>

<script>
    import { $ } from '@/lib/dom-selector'

    const $form = $('#form') as HTMLFormElement
    const $conceptInput = $('#concept') as HTMLInputElement
    const $resetBtn = $('#reset-btn') as HTMLButtonElement
    const $totalInput = $('#total') as HTMLInputElement

    const formatNumber = (amount: string) => {
        return amount.replace(/\B(?=(\d{3})+(?!\d))/g, '.')
    }

    const cleanNumber = (value: string) => {
        const cleanedValue = value.replace(/\./g, '')
        return isNaN(Number(cleanedValue)) ? '' : cleanedValue
    }

    const handleSubmit = async (e: SubmitEvent) => {
        e.preventDefault()

        const totalAmountValue = cleanNumber($totalInput.value)
        if (!totalAmountValue) {
            console.error('Importe no válido')
            alert('Por favor, ingrese un importe válido.')
            $totalInput.focus()
            return
        }

        $totalInput.value = totalAmountValue

        const formData = new FormData($form)

        try {
            const res = await fetch('/api/income', {
                method: 'POST',
                body: formData
            })

            if (!res.ok) throw new Error('Error en la respuesta del servidor')

            $form.reset()
            $conceptInput.focus()
        } catch (error) {
            console.error('Error al enviar el formulario:', error)
            alert(
                'Hubo un error al registrar el ingreso. Por favor, intente de nuevo.'
            )
        }
    }

    $totalInput.addEventListener('input', e => {
        const input = e.target as HTMLInputElement

        if (input.value === '0') input.value = ''

        const value = input.value.replace(/\D/g, '')
        input.value = formatNumber(value)
    })

    $form.addEventListener('submit', handleSubmit)
    $resetBtn.addEventListener('click', () => {
        $conceptInput.focus()
    })
</script>

<style>
    form {
        display: flex;
        flex-direction: column;
        gap: 20px;
        max-width: 380px;
        margin: 0 auto;
        font-size: 1.3rem;
        font-weight: 500;
    }

    input {
        border: none;
        border-radius: 4px;

        width: 100%;
        padding: 10px;
    }
</style>
